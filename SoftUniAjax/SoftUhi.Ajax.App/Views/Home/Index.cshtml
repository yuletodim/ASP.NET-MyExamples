@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1>ASP.NET</h1>
    <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>
    <p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>

<div class="row">
    <div class="col-md-4">
        <h2>Ajax</h2>
        <p>
            !!! Very important return _PartialView
        </p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301865">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Native ajax - jQuery</h2>
        <div id="timeDisplay"></div>
        <a onclick="updateSurverTimeAjax()">Get Server Time</a>
    </div>
    <div class="col-md-4">
        <h2>Ajax helpers</h2>
        <div id="timeDisplay-ASP.NET"></div>
        ASP.NET needs NuGet package -> Microsoft.jQuery.Unobtrusive.Ajax
        It puts all data-atributes that makes JS to parse ajax
        Include it in jQuery bundle!!!
        @Ajax.ActionLink("Load server time", "ServerTime", null,
            new AjaxOptions() {
                HttpMethod = "GET",
                UpdateTargetId = "timeDisplay-ASP.NET",
                // LoadingElementId = "", -> element that will show some loading action
                InsertionMode = InsertionMode.Replace,
                OnBegin = "OnAjaxRequestBegin", // JS functions that will execute in each case
                OnComplete = "OnAjaxRequestComplete",
                OnSuccess = "OnAjaxRequestSuccess",
                OnFailure = "OnAjaxRequestError"
            },
            htmlAttributes: new { @class="btn btn-primary"}
        )
    </div>
    <div class="col-md-4">
        <h2>Json</h2>
        <div id="wrapper"></div>
    </div>
</div>


@*native JS*@
@*@section scripts{
    <script>
        var request = new XMLHttpRequest();
        request.open("GET", "/Home/About");
        request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
                alert(request.responseText);
            }
        };
        request.send();
    </script>
}*@

@*ajax*@
@section scripts{
<script>
    $.ajax("/Home/About", {
        method: "GET",
        success: function(data){
            alert(data);
        },
        error: function(error){
            alert(error);
        }
    });

    //$.get("/Home/About", {}, function (data) {
    //    alert(data);
    //});

    // Paralel async ajax -> promisses
    // jQuery has implemented promisses by default

    var jqRequest = $.ajax("/Home/About", {
        method: "GET",
        success: function (data) {
            console.log(data);
        }
    });

    console.log(jqRequest);

    // $.Deffered() => 2 props -> resolve and reject => 
    // execute a function in future 
    // on success...... -> .then()
    // on error ....... -> .then()
    // a lot of async functions with dependencies(callbacks)

    var asyncRequest = $.Deferred();
    asyncRequest
        .then(function (data) { }, function (error) { })
        .then(function () { })
        .then(function () { })
        .then(function () { });

    // t.e. jQuery vrushta promiss by defualt -> through .Deffered()
    // returns it like param

    function updateSurverTimeAjax(){
        $("#timeDisplay").load("/Home/ServerTime");
    }

    function OnAjaxRequestBegin() {
        alert("ASP.NET ajax began");
    }

    function OnAjaxRequestComplete() {
        alert("ASP.NET ajax finished");
    }

    function OnAjaxRequestSuccess(data) {
        alert(data);
    }

    function OnAjaxRequestError(error) {
        alert(error);
    }

    $.getJSON("/Home/GetValues", {}, function (values) {
        var list = $('<ul>');
        values.forEach(function (value) {
            $('<li>').html(value).appendTo(list);
        });
        $('#wrapper').append(list);
    })
</script>
}